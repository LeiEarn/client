<style lang="less">
page,
.page {
  height: 100%;
  width: 100%;
}
.head {
  height: 130rpx;
  width: 130rpx;
}
.dialog {
  width: 100%;
  height: 100%;
  z-index: 1;
  position: absolute;
  top: 0rpx;
  padding: 40% 0;
  background-color: rgba(0, 0, 0, 0.5);
}
.dialog_body {
  width: 50%;
  margin: 0 auto;
  display: block;
  border: 1rpx solid rgba(0, 0, 0, 0.5);
  border-radius: 20rpx;
  box-shadow: 8rpx;
  padding: 10% 0;
  background-color: white;
}
.uploader {
  width: 260rpx;
  height: 260rpx;
  margin: 0 auto;
  display: block;
}
</style>
<template>
  <view class="page">
    <view class="weui-cells">
      <view
        class="weui-cell weui-cell_access"
        hover-class="weui-cell_active"
        bindtap="head"
      >
        <view class="weui-cell__bd">头像</view>
        <image
          class="weui-cell__ft weui-cell__ft_in-access head"
          src="{{userInfo.avatarUrl}}"
        />
      </view>
      <view
        class="weui-cell weui-cell_access"
        hover-class="weui-cell_active"
        bindtap="name"
      >
        <view class="weui-cell__bd">昵称</view>
        <view class="weui-cell__ft weui-cell__ft_in-access">{{userInfo.nickName}}</view>
      </view>
      <view
        class="weui-cell weui-cell_access"
        hover-class="weui-cell_active"
        bindtap="address"
      >
        <view class="weui-cell__bd">地址</view>
        <view class="weui-cell__ft weui-cell__ft_in-access">东校区明德园二号</view>
      </view>
    </view>
    <modal
      class="dialog"
      hidden="{{modify == 0}}"
      title="修改个人信息"
      confirm-text="确认"
      cancel-text="取消"
      bindconfirm="confirm"
      bindcancel="cancel"
    >
      <image
        class="weui-cell uploader"
        bindtap="getTempAvatarUrl"
        src="{{ temp.avatarUrl }}"
        hidden="{{modify != 1}}"
      />
      <input
        class="weui-cell"
        placeholder="{{temp.nickName}}"
        hidden="{{modify != 2}}"
        autofocus
        bindinput="getTempNickName"
      />
      <input
        class="weui-cell"
        placeholder="明德园二号"
        hidden="{{modify != 3}}"
        autofocu
        bindinput="getTempAddress"
      />
    </modal>
  </view>
</template>

<script>
import wepy from 'wepy';
export default class Info extends wepy.page {
  config = {
    navigationBarTitleText: '修改用户信息'
  }
  components = {}
  data = {
    userId: null,
    userInfo: {
      avatarUrl: '../../assets/background.jpg',
      nickName: '何枷瑜'
    },
    temp: {
      avatarUrl: '',
      nickName: ''
    },
    modify: 0
  }
  methods = {
    head() {
      this.temp.avatarUrl = this.userInfo.avatarUrl;
      this.modify = 1;
    },
    name() {
      this.temp.nickName = this.userInfo.nickName;
      this.modify = 2;
    },
    address() {
      this.modify = 3;
    },
    getTempAvatarUrl(e) {
      var self = this;
      wepy.chooseImage({
        count: 1,
        sizeType: ['original', 'compressed'], // 可以指定是原图还是压缩图，默认二者都有
        sourceType: ['album', 'camera'], // 可以指定来源是相册还是相机，默认二者都有
        success: function (res) {
          // 返回选定照片的本地文件路径列表，tempFilePath可以作为img标签的src属性显示图片
          self.temp.avatarUrl = res.tempFilePaths[0];
          self.$apply();
        }
      });
    },
    getTempNickName(e) {
      this.temp.nickName = e.detail.value;
    },
    getTempAddress(e) {
      this.temp.address = e.detail.value;
    },
    cancel() {
      this.modify = 0;
    },
    confirm() {
      if (this.modify === 1) {
        if (this.userInfo.avatarUrl !== this.temp.avatarUrl) {
          let self = this;
          wepy.uploadFile({
            url: wepy.$appConfig.baseUrl + '/images', // 开发者服务器 url
            filePath: self.temp.avatarUrl, // 要上传文件资源的路径
            name: 'photo', // 文件对应的 key , 开发者在服务器端通过这个 key 可以获取到文件二进制内容
            success: res => {
              res.data = JSON.parse(res.data);
              const rq = require('../../lib/request.js');
              var obj = {
                url: '/user/info',
                data: {
                  avatarUrl: res.data.msg,
                  nickName: self.userInfo.nickName
                },
                method: 'PUT'
              };
              console.log(obj);
              rq.request(obj).then(res => {
                console.log(res);
                if (res.errMsg == 'request:ok') {
                  self.userInfo.avatarUrl = res.data.avatarUrl;
                  self.temp.avatarUrl = '';
                }
                self.$apply();
              }).catch(err => {
                if (err.data.message == 'login') {
                  self.$parent.reLogin();
                  self.$apply();
                }
              });
            },
            fail: err => {
              console.log(err.data);
            },
            complete: () => {}
          });
        }
      } else {
        let self = this;
        const rq = require('../../lib/request.js');
        var obj = {
          url: '/user/info',
          data: {
            avatarUrl: this.userInfo.avatarUrl,
            nickName: this.temp.nickName
          },
          method: 'PUT'
        };
        console.log(obj);
        rq.request(obj).then(res => {
          console.log(res);
          if (res.errMsg == 'request:ok') {
            self.userInfo.nickName = res.data.nickName;
            self.temp.nickName = '';
          }
          self.$apply();
        }).catch(err => {
          if (err.data.message == 'login') {
            self.$parent.reLogin();
            self.$apply();
          }
        });
      }
      this.modify = 0;
    }
  }
  events = {
    'index-emit': (...args) => {
      let $event = args[args.length - 1];
      console.log(`${this.$name} receive ${$event.name} from ${$event.source.$name}`);
    }
  }
  onLoad() {
    let self = this;
    if (this.$parent.globalData.user.userInfo) {
      this.userInfo = this.$parent.globalData.user.userInfo;
    } else {
      this.$parent.login(function (user) {
        if (user) {
          self.userInfo = user.userInfo;
          self.$apply();
        }
      });
    }
  }
}
</script>
